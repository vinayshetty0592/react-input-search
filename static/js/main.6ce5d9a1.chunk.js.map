{"version":3,"sources":["components/react-input-search/index.js","App.js","reportWebVitals.js","index.js"],"names":["ReactInputSearch","props","useState","userInput","setUserInput","filteredOptions","setFilteredOptions","showOption","setShowOptions","searchHandler","value","results","length","options","filter","item","includes","key","search","className","type","name","placeholder","onChange","e","target","autoComplete","map","onClick","onItemClickHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA0DeA,G,MAxDU,SAACC,GAAW,IAAD,EACAC,mBAAS,IADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAEYF,mBAAS,IAFrB,mBAE3BG,EAF2B,KAEVC,EAFU,OAGGJ,oBAAS,GAHZ,mBAG3BK,EAH2B,KAGfC,EAHe,KAoB5BC,EAAgB,SAACC,GACrBJ,EAAmB,IACnB,IAAMK,EAZO,SAACD,GACd,OAAIA,EAAME,OACDX,EAAMY,QAAQC,QACnB,SAACC,GAAD,OAAUA,EAAKL,MAAMM,SAASN,IAAUK,EAAKE,IAAID,SAASN,MAGrD,GAMOQ,CAAOR,GACvBJ,EAAmBK,GACnBH,GAAe,IAQjB,OACE,sBAAKW,UAAU,YAAf,UACE,uBACEA,UAAU,QACVC,KAAK,OACLC,KAAK,SACLC,YAAY,aACZZ,MAAOP,EACPoB,SAnCkB,SAACC,GACvBpB,EAAaoB,EAAEC,OAAOf,OACtBD,EAAce,EAAEC,OAAOf,QAkCnBgB,aAAa,QAEdrB,EAAgBO,OAAS,GAAKL,GAC7B,oBAAIY,UAAU,gBAAd,SACGd,EAAgBsB,KAAI,SAACZ,EAAME,GAAP,OACnB,oBAAcW,QAAS,kBAnBN,SAACb,GAC1BP,GAAe,GACfJ,EAAaW,EAAKL,OAiBmBmB,CAAmBd,IAAhD,SACGA,EAAKL,OADCO,aCjCNa,MAbf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,CACEN,QAAS,CACP,CAAEI,IAAK,QAASP,MAAO,SACvB,CAAEO,IAAK,OAAQP,MAAO,QACtB,CAAEO,IAAK,MAAOP,MAAO,aCGhBqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ce5d9a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './styles.css';\nconst ReactInputSearch = (props) => {\n  const [userInput, setUserInput] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [showOption, setShowOptions] = useState(false);\n\n  const onChangeHandler = (e) => {\n    setUserInput(e.target.value);\n    searchHandler(e.target.value);\n  };\n\n  const search = (value) => {\n    if (value.length) {\n      return props.options.filter(\n        (item) => item.value.includes(value) || item.key.includes(value)\n      );\n    } else {\n      return [];\n    }\n  };\n\n  const searchHandler = (value) => {\n    setFilteredOptions([]);\n    const results = search(value);\n    setFilteredOptions(results);\n    setShowOptions(true);\n  };\n\n  const onItemClickHandler = (item) => {\n    setShowOptions(false);\n    setUserInput(item.value);\n  };\n\n  return (\n    <div className='container'>\n      <input\n        className='input'\n        type='text'\n        name='search'\n        placeholder='Enter Text'\n        value={userInput}\n        onChange={onChangeHandler}\n        autoComplete='off'\n      />\n      {filteredOptions.length > 0 && showOption && (\n        <ul className='searchResults'>\n          {filteredOptions.map((item, key) => (\n            <li key={key} onClick={() => onItemClickHandler(item)}>\n              {item.value}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ReactInputSearch;\n","import ReactInputSearch from './components/react-input-search/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ReactInputSearch\n        options={[\n          { key: 'apple', value: 'Apple' },\n          { key: 'ball', value: 'Ball' },\n          { key: 'cat', value: 'Cat' },\n        ]} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}